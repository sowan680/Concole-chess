class ChessPiece:
    def __init__(self, color, position):
        self.color = color
        self.position = position
        self.symbol = None

    def check_move(self, position, new_position, board):
        pass

    def __str__(self):
        return self.symbol


class Pawn(ChessPiece):
    def __init__(self, color, position):
        super().__init__(color, position)
        self.symbol = '‚ôô' if color == 'white' else '‚ôü'

    def check_move(self, position, new_position, board):
        col, row = new_position
        if self.color == 'white':
            direction = -1
            start_row = 6
        else:
            direction = 1
            start_row = 1

        start_col, start_row_board = position

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –≤–ø–µ—Ä–µ–¥
        if start_col == col and start_row_board + direction == row and not isinstance(board.board[row][col],
                                                                                      ChessPiece):
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –¥–≤–µ –∫–ª–µ—Ç–∫–∏ –≤–ø–µ—Ä–µ–¥ –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
        if (start_col == col and start_row == start_row_board and start_row + 2 * direction == row and
                not isinstance(board.board[row][col], ChessPiece)):
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—ä–µ—Å—Ç—å —Ñ–∏–≥—É—Ä—É
        if abs(start_col - col) == 1 and start_row_board + direction == row:
            target_piece = board.board[row][col]
            if isinstance(target_piece, ChessPiece) and target_piece.color != self.color:
                return True

        return False


class Rook(ChessPiece):
    def __init__(self, color, position):
        super().__init__(color, position)
        self.symbol = '‚ôñ' if color == 'white' else '‚ôú'

    def check_move(self, position, new_position, board):
        start_col, start_row = position
        target_col, target_row = new_position

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–≤–∏–≥–∞–µ—Ç—Å—è –ª–∏ –ª–∞–¥—å—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        if start_col != target_col and start_row != target_row:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Ñ–∏–≥—É—Ä –Ω–∞ –ø—É—Ç–∏ –ª–∞–¥—å–∏ –º–µ–∂–¥—É –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏—è–º–∏
        if start_col == target_col:  # –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            step = 1 if target_row > start_row else -1
            for i in range(start_row + step, target_row, step):
                if isinstance(board.board[i][start_col], ChessPiece):
                    return False
        else:  # –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            step = 1 if target_col > start_col else -1
            for i in range(start_col + step, target_col, step):
                if isinstance(board.board[start_row][i], ChessPiece):
                    return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ª–∞–¥—å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        target_piece = board.board[target_row][target_col]
        if isinstance(target_piece, ChessPiece) and target_piece.color == self.color:
            return False

        return True


class Knight(ChessPiece):
    def __init__(self, color, position):
        super().__init__(color, position)
        self.symbol = '‚ôò' if color == 'white' else '‚ôû'

    def check_move(self, position, new_position, board):
        start_col, start_row = position
        target_col, target_row = new_position

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –∫–æ–Ω–µ–º (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ 2 –∫–ª–µ—Ç–∫–∏ –ø–æ –æ–¥–Ω–æ–π –æ—Å–∏ –∏ –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –ø–æ –¥—Ä—É–≥–æ–π –æ—Å–∏)
        if abs(start_col - target_col) == 2 and abs(start_row - target_row) == 1:
            return True
        elif abs(start_col - target_col) == 1 and abs(start_row - target_row) == 2:
            return True
        else:
            return False


class Bishop(ChessPiece):
    def __init__(self, color, position):
        super().__init__(color, position)
        self.symbol = '‚ôó' if color == 'white' else '‚ôù'

    def check_move(self, position, new_position, board):
        start_col, start_row = position
        target_col, target_row = new_position

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        if abs(start_col - target_col) == abs(start_row - target_row):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Ñ–∏–≥—É—Ä –Ω–∞ –ø—É—Ç–∏ —Å–ª–æ–Ω–∞ –º–µ–∂–¥—É –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏—è–º–∏
            col_step = 1 if target_col > start_col else -1
            row_step = 1 if target_row > start_row else -1
            col, row = start_col + col_step, start_row + row_step
            while col != target_col and row != target_row:
                if isinstance(board.board[row][col], ChessPiece):
                    return False
                col += col_step
                row += row_step

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Å–ª–æ–Ω –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            target_piece = board.board[target_row][target_col]
            if isinstance(target_piece, ChessPiece) and target_piece.color == self.color:
                return False

            return True

        return False


class Queen(ChessPiece):
    def __init__(self, color, position):
        super().__init__(color, position)
        self.symbol = '‚ôï' if color == 'white' else '‚ôõ'

    def check_move(self, position, new_position, board):
        start_col, start_row = position
        target_col, target_row = new_position

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –∏–ª–∏ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        if start_col == target_col or start_row == target_row or abs(start_col - target_col) == abs(
                start_row - target_row):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Ñ–∏–≥—É—Ä –Ω–∞ –ø—É—Ç–∏ —Ñ–µ—Ä–∑—è –º–µ–∂–¥—É –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏—è–º–∏
            if start_col == target_col:  # –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                step = 1 if target_row > start_row else -1
                for i in range(start_row + step, target_row, step):
                    if isinstance(board.board[i][start_col], ChessPiece):
                        return False
            elif start_row == target_row:  # –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                step = 1 if target_col > start_col else -1
                for i in range(start_col + step, target_col, step):
                    if isinstance(board.board[start_row][i], ChessPiece):
                        return False
            else:  # –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
                col_step = 1 if target_col > start_col else -1
                row_step = 1 if target_row > start_row else -1
                col, row = start_col + col_step, start_row + row_step
                while col != target_col and row != target_row:
                    if isinstance(board.board[row][col], ChessPiece):
                        return False
                    col += col_step
                    row += row_step

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Ñ–µ—Ä–∑—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            target_piece = board.board[target_row][target_col]
            if isinstance(target_piece, ChessPiece) and target_piece.color == self.color:
                return False

            return True

        return False


class King(ChessPiece):
    def __init__(self, color, position):
        super().__init__(color, position)
        self.symbol = '‚ôî' if color == 'white' else '‚ôö'

    def check_move(self, position, new_position, board):
        start_col, start_row = position
        target_col, target_row = new_position

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –∫–æ—Ä–æ–ª–µ–º (—Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏, –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏)
        if abs(start_col - target_col) <= 1 and abs(start_row - target_row) <= 1:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∫–æ—Ä–æ–ª—å —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            target_piece = board.board[target_row][target_col]
            if not isinstance(target_piece, ChessPiece) or target_piece.color != self.color:
                return True

        return False


class Enchanter(ChessPiece):
    def __init__(self, color, position):
        super().__init__(color, position)
        self.symbol = '‚öî' if color == 'white' else '‚öí'

    def check_move(self, position, new_position, board):
        start_col, start_row = position
        target_col, target_row = new_position

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —á–∞—Ä–æ–¥–µ–π —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        target_piece = board.board[target_row][target_col]
        if not isinstance(target_piece, ChessPiece) or target_piece.color != self.color:
            return True

        return False


class Dragon(ChessPiece):
    def __init__(self, color, position):
        super().__init__(color, position)
        self.symbol = 'üêâ' if color == 'white' else 'üê≤'

    def check_move(self, position, new_position, board):
        start_col, start_row = position
        target_col, target_row = new_position

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –¥—Ä–∞–∫–æ–Ω–æ–º
        if (abs(start_col - target_col) == 3 and abs(start_row - target_row) == 2) or \
                (abs(start_col - target_col) == 2 and abs(start_row - target_row) == 3):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –¥—Ä–∞–∫–æ–Ω —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            target_piece = board.board[target_row][target_col]
            if not isinstance(target_piece, ChessPiece) or target_piece.color != self.color:
                return True

        return False


class Magister(ChessPiece):
    def __init__(self, color, position):
        super().__init__(color, position)
        self.symbol = 'üîÆ' if color == 'white' else 'üìú'

    def check_move(self, position, new_position, board):
        start_col, start_row = position
        target_col, target_row = new_position

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –º–∞–≥–∏—Å—Ç—Ä–æ–º
        if abs(start_col - target_col) <= 4 and abs(start_row - target_row) <= 4:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –º–∞–≥–∏—Å—Ç—Ä —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            target_piece = board.board[target_row][target_col]
            if not isinstance(target_piece, ChessPiece) or target_piece.color != self.color:
                return True

        return False


class CheckersPiece(ChessPiece):
    def __init__(self, color, position):
        super().__init__(color, position)
        self.symbol = '‚õÄ' if color == 'white' else '‚õÇ'

    def check_move(self, position, new_position, board):
        start_col, start_row = position
        target_col, target_row = new_position

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–º –∏ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É
        if abs(start_col - target_col) == 1 and abs(start_row - target_row) == 1:
            return True
        else:
            return False

